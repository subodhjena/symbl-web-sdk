import Symbl from "../../src2/symbl";
import { ConnectionFactory, BaseConnection } from '../../src2/connection';
import { PCMAudioStream, OpusAudioStream } from '../../src2/audio';
import { StreamingAPIConnection  } from "../../src2/api";
import { NotSupportedSampleRateError  } from "../../src2/error";
import { APP_ID, APP_SECRET } from '../constants';
import { uniquenessRegex, uuid } from '../../src2/utils';

// Validate `options` with the `StreamingAPIConnectionConfig` interface
// Validate `id` as a `uuid` or its `uniqueness` and if it doesn't conform, reject the request with `SessionIDNotUniqueError`
// If no `id` is present in the options, log a warning and assign a `uuid`
// Establish a new Streaming API Connection via the `ConnectionFactory`, creating an instance of the `StreamingAPIConnection`
// Invoke the `connect` function to establish an idle connection with Streaming API. (It will not process Audio in this state)
// If the Connection establishment fails, throw the appropriate error generated by the `StreamingAPIConnection` interface.
// Return the connection instance


/** define mocks */
jest.mock("../../src2/utils");
jest.mock("symbl-opus-encdec");
const startProcessingMock = jest.fn(() => {
    // (StreamingAPIConnection as any).processingState = ConnectionProcessingState.PROCESSING;
});
const connectMock = jest.fn();
jest.mock("../../src2/api", () => {
    return {
        StreamingAPIConnection: jest.fn().mockImplementation(() => {
            return {
                connect: connectMock,
                startProcessing: startProcessingMock,
                sdk: {
                    createStream: jest.fn()
                },
                stream: {
                    start: jest.fn()
                }
            }
        })
    }
});
jest.mock('../../src2/connection', () => {
    return {
        ConnectionFactory: jest.fn().mockImplementation(() => {
            return {
                instantiateConnection: jest.fn(() => {
                    return new StreamingAPIConnection({} as any, {} as any) as any;
                })
            }
        })
    }
})
/** end mocks definition **/

test(
    "Symbl.createConnection - Calling createConnection with valid config without passing AudioStream",
    async () => {
        const authConfig = {
            appId: APP_ID,
            appSecret: APP_SECRET
        };

        const symbl = new Symbl(authConfig);
        const connectionConfig = {
            insightTypes: ['action_item', 'question'],
            config: {
                meetingTitle: 'My Test Meeting',
                confidenceThreshold: 0.7,
                timezoneOffset: 480,
                languageCode: 'en-US',
            },
            speaker: {
                userId: 'emailAddress',
                name: 'My name'
            },
        };
        const connection = await symbl.createConnection(connectionConfig);
        expect(ConnectionFactory).toHaveBeenCalled();
        expect(connectMock).toBeCalledTimes(1);
        expect(uuid).toBeCalledTimes(1);
        expect(startProcessingMock).toBeCalledTimes(0);
        expect(connection instanceof StreamingAPIConnection);
    }
);

test(
    "Symbl.createConnection - Calling createConnection with valid config that contains an id",
    async () => {
        const authConfig = {
            appId: APP_ID,
            appSecret: APP_SECRET
        };
        const id = "123940-2390394-19848598";
        try {
            const symbl = new Symbl(authConfig);
            const connectionConfig = {
                id,
                insightTypes: ['action_item', 'question'],
                config: {
                    meetingTitle: 'My Test Meeting',
                    confidenceThreshold: 0.7,
                    timezoneOffset: 480,
                    languageCode: 'en-US',
                },
                speaker: {
                    userId: 'emailAddress',
                    name: 'My name'
                },
            };
            // const connectSpy = jest.spyOn(Connection)
            expect(ConnectionFactory).toHaveBeenCalled();
            const connection = symbl.createConnection(connectionConfig);
            expect(connection instanceof StreamingAPIConnection);
            expect(connection.id).toBe(id);
        } catch (e) {
            throw new Error(e);
        }
    }
);

// test(
//     "Symbl.createConnection - Calling createConnection with valid config and passing in PCMAudioStream",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };
//         const audioStream = new PCMAudioStream();

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 'My name'
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig, audioStream);
//             expect(connection instanceof StreamingAPIConnection);
//             expect(connection.audioStream).toBe(audioStream);
//         } catch (e) {
//             throw new Error(e);
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with valid config and passing in OpusAudioStream",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };
//         const audioStream = new OpusAudioStream();

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 'My name'
//                 },
//             };
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig, audioStream);
//             expect(connection instanceof StreamingAPIConnection);
//             expect(connection.audioStream).toBe(audioStream);
//         } catch (e) {
//             throw new Error(e);
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - extra insightType",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question', 'invalid_type'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 'My name'
//                 },
//             };
//             const connection = symbl.createConnection(connectionConfig);
//         } catch (e) {
//             expect(e).toEqual(new InvalidValueError("Invalid config"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - extra key in config",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                     extraKey: 'value',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 'My name'
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new InvalidValueError("Invalid config"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - extra key in speaker",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 'My name',
//                     extraKey: 'value',
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new InvalidValueError("Invalid config"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - extra key at root level",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 'My name',
//                 },
//                 extraKey: 'value',
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new InvalidValueError("Invalid config"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - invalid value type in key",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 1,
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new InvalidValueError("Invalid config"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - NotSupportedSampleRateError",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                     sampleRateHertz: 1
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 1,
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new NotSupportedSampleRateError("Invalid sampleRateHertz for encoding"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - NotSupportedSampleRateError - 32khz on opus",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                     encoding: 'opus',
//                     sampleRateHertz: 32000
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 1,
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new NotSupportedSampleRateError("Invalid sampleRateHertz for encoding"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - Calling createConnection with invalid config - NotSupportedAudioEncodingError",
//     async () => {
//         const authConfig = {
//             appId: APP_ID,
//             appSecret: APP_SECRET
//         };

//         try {
//             const symbl = new Symbl(authConfig);
//             const connectionConfig = {
//                 insightTypes: ['action_item', 'question'],
//                 config: {
//                     meetingTitle: 'My Test Meeting',
//                     confidenceThreshold: 0.7,
//                     timezoneOffset: 480,
//                     languageCode: 'en-US',
//                     encoding: 'not-supported',
//                 },
//                 speaker: {
//                     userId: 'emailAddress',
//                     name: 1,
//                 },
//             };
//             // const connectSpy = jest.spyOn(Connection)
//             expect(ConnectionFactory).toHaveBeenCalled();
//             const connection = symbl.createConnection(connectionConfig);
//             expect(connection instanceof StreamingAPIConnection);
//         } catch (e) {
//             expect(e).toEqual(new NotSupportedAudioEncodingError("Not a valid encoding"))
//         }
//     }
// );

// test(
//     "Symbl.createConnection - ID should be alphanumeric and minimum length of 6; checking for invalid cases.",
//     async () => {
//         try {
//             const regex = new RegExp(uniquenessRegex);
//             const invalidStrings = ['abc', '123', 'abcdef', '123456'];
//             expect(regex.test(invalidStrings[0])).not.toBe(true);
//         } catch (e) {
//             throw new Error(e)
//         }
//     }
// )

// test(
//     "Symbl.createConnection - ID should be alphanumeric and minimum length of 6; checking for valid cases.",
//     async () => {
//         try {
//             const regex = new RegExp(uniquenessRegex);
//             const validStrings = ['abc123', 'xyz369', '0a1b2c3d4f5e', '00000a'];
//             expect(regex.test(validStrings[0])).toBe(true);
//         } catch (e) {
//             throw new Error(e)
//         }
//     }
// )